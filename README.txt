OVERVIEW

Takes in LAB colour data and produces power efficiency for 1Dip,2Dip,1Gauss,2Gauss spectrum generation types

op_send_py is the main script, takes in LAB colour data, calls Optimize from optimize_pipeline to get optimized center, width, peak values
for 1D,1G,2D,2G, for each dE below a tolerance. Optimizer is calling functions in Spectrum_Functions to generate spectrums
Optimizer calls spec_to_xyz from spectrum pipeline to convert coordinates #SPEC TO XYZ COULD BE MOVED TO SPECTRUM FUNCTIONS
#IT CURRENTLY WORKS AS IS, WOULD NEED TO TEST IF CHANGING THIS
Sends data to SQlimit.py Then gets sent back to op_send_op to calculate max power


op_send_sq.py
main script calls/runs the other scripts from here
 
Runs through LAB colour data, along with colour name/label.
Stores data for each colour in an object of Optimize class from optimize_pipeline.py
Each object has  [center, width, peak, spectrum,lab] for 1D cases [center, width, center2, width2,spectrum,lab] for 2D cases

NEED TO REWRITE TO SAVE DATA BETTER CURRENTLY THIS ONLY WORKS FOR ONE COLOUR AT A TIME
Power efficiency data is stored in efficiency dictionary
data formated powerpoint should demonstrate how some of this data is organized

optimize_pipeline.py
Runs Scipy Optimizer on 1D,2D,1G,2G. Stores [center, width, peak, spectrum,lab] stores all colours below a certain dE threshold
SQlimit
CURRENTLY HAS FUNCTIONS TO SAVE/EXCEL FILES OF DATA TO COMPARE TO MATLAB DATA
THESE COULD BE REMOVED ONCE TESTING TO MATLAB VALUES ARE COMPLETED

#variables
self.vis_bounds, wavelength boundaries for visible spectrum, tuple
self.width_max, maximum width for 1D,1G, tuple
self.width2_max, maximum width for 2D,2G, tuple
self.peak_range, adjust maximum peak, tuple

self.x0, initial guess for 1D,1G optimizer for, [center,width,peak], list
self.x02d, initial guess for 2D, 2G optimizer for [center,width,center2,width2], list

dictionary spectrums for each spectrum type, these gets stored as a tuple into self.tu_cp
self.d1_cp  = {} #  spectrum, width, center, peak color parameters to be used for each delta E to calculate color spectrum into SQlim
self.d2_cp  = {}
self.g1_cp  = {}
self.g2_cp  = {}
key will be delta_E and the values will be cp_list =([center, width, peak, spectrum,Lab])

self.dE_threshold1d = 10, values below this dE will get stored and sent to efficiency calculation for 1D, 1G, int,float
self.dE_threshold = 2  values below this dE will get stored and sent to efficiency calculation for 2D, 2G, int, float
tolerance, tolerance for optimization cut off, float

self.tu_cp, tuple of color parameter dictionaries to easily access all of these values at once
Storing the center,peak,width,dE,spectrum, colour data for each spectrum type , tuple

#functions

op_delta_1dip
used in self.result1d_Minimize = minimize(self.op_delta_E_1dip,self.x0,method= method1, bounds=self.ranges,tol = tolerance,options={'verbose':3})#'initial_tr_radius': 0.5})
Used for scipy optimizer
And if below tolerance data gets added to d1_cp, which then all ge added into the tu_cp list of dictionaries

Calculating spectrum from Spectrum_Functions_
converting to XYZ from xyz_to_spec in Spectrum_Functions_
Works in a similar way for the other spectrum functions

#THESE FUNCTIONS COULD PROBABLY BE REMOVED OR MOVED TO ANOTHER FILE ONCE TESTING WITH MATLAB DATA IS COMPLETE
save_xlsx
Optimized values and saves them into an excel spreadsheet (MAY NOT WORK WITH THRESHOLD VALUES, NOT SET UP TO STORE
MORE THAN ONE SET OF DATA AT A TIME) used to compare matlab values to Python values and make sure they are consistent.

load_python data
Getting Python data ready to be used for save_xlsx

load_matlab_data
Getting MATLAB data ready to be used for save_xlsx
reading in data from excel sheets generated by results.m 

results_save_xcel
Update dictionaries from load_python and load_matlab into one and then send that to save_xlsx so all data is on
the spreadsheet


Spectrum_Functions_.py
Has functions to generate 1D,1G, 2D,2G, spex_to_xyz could also be used from here, currently spec_to_xyz is in spectrum_pipeline?

spectrum_pipeline

SQlimit.py
Takes in spectrum data used to calculate efficiency data

SQ1 = SQl.SQlim(spectrum,Eg)
E_subcell, PCEsubcell, eff = SQ1.available_E(Eg) used to calculate efficiency data
